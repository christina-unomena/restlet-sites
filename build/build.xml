<?xml version="1.0"?>

<!-- ==============================================
     Web build file  -  Copyright 2005-2013 Restlet
     ============================================== -->

<project name="Web" default="rebuild">
	<import file="${forge-home}/forge-tools.xml" optional="true" />

	<!-- Set global names -->
	<property file="custom.properties" />
	<property file="build.properties" />
	<property name="author" value="Jerome Louvel" />

	<!-- Set global paths -->
	<property name="temp" location="temp" />
	<property name="javadocs" value="${temp}/javadocs" />
	<property name="classes" value="${temp}/classes" />
	<property name="bin" location="bin" />
	<property name="conf" value="${bin}/conf" />
	<property name="dist" location="dist" />
	<property name="dist-path" value="web-${version-compact}" />
	<property name="tmpl" location="tmpl" />
	<property name="data" location="prod/data" />
	<property name="docs" location="docs" />
	<property name="src" location="../modules/com.restlet.frontend/src" />
	<property name="lib" location="../librairies" />

	<property name="www" value="www" />
	<property name="restlet-com" value="${www}/restlet-com" />
	<property name="restlet-org" value="${www}/restlet-org" />
    <property name="apispark-org" value="${www}/apispark-org" />
	
	<path id="main.path">
		<fileset dir="${lib}" includes="**/*.jar" />
	</path>

	<path id="fmpp.path">
		<pathelement location="tools/fmpp/bsh.jar" />
		<pathelement location="tools/fmpp/fmpp.jar" />
		<pathelement location="tools/fmpp/freemarker.jar" />
		<pathelement location="tools/fmpp/oro.jar" />
		<pathelement location="tools/fmpp/resolver.jar" />
	</path>

	<!-- =================== -->
	<!-- ===  Ant Tasks  === -->
	<!-- =================== -->
	<!-- FMPP (FreeMarker-based text file PreProcessor) -->
	<taskdef name="fmpp" classname="fmpp.tools.AntTask" classpathref="fmpp.path" />

	<!-- ==================== -->
	<!-- ===  Ant Macros  === -->
	<!-- ==================== -->

	<!-- ===================== -->
	<!-- ===  Ant Targets  === -->
	<!-- ===================== -->

	<!-- GENERAL targets -->
	<target name="build" depends="init, generate, verify, integrate, stage, package" description="Full build." />
	<target name="rebuild" depends="init, clean, generate, verify, integrate, stage, package" description="Full build from scratch." />

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Set the property that will enable the Javadoc target -->
		<condition property="do-javadoc">
			<istrue value="${javadoc}" />
		</condition>
		<!-- Set the property that will enable the Package target -->
		<condition property="do-package">
			<istrue value="${package}" />
		</condition>
		<!-- Set the property that will enable the Integrate target -->
		<condition property="do-integrate">
			<istrue value="${integrate}" />
		</condition>
	</target>

	<!-- CLEAN target -->
	<target name="clean" depends="clean-temp, clean-dist" description="Clean the staging area." />

	<!-- CLEAN-DIST target -->
	<target name="clean-dist" description="Clean distributions files.">
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${dist}">
				<include name="*/${dist-path}/**/*" />
				<include name="*/${dist-path}" />
			</fileset>
		</delete>

		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${dist}" />
		</delete>
	</target>

	<!-- CLEAN-TEMP target -->
	<target name="clean-temp" description="Clean temporary build files.">
		<!-- Delete the classes and Javadoc directories -->
		<delete includeEmptyDirs="true" verbose="false" quiet="false" failonerror="false">
			<fileset dir="${temp}" />
		</delete>
	</target>

	<!-- GENERATE target -->
	<target name="generate" depends="generate-classes, generate-templates, generate-javadocs" description="Generate files." />

	<target name="generate-classes" description="Compile the source files.">
		<!-- Create the classes directory used by compiler -->
		<mkdir dir="${classes}" />

		<!-- Compiles source files -->
		<javac compiler="javac1.6" debug="true" srcdir="${src}" destdir="${classes}" classpathref="main.path" />
	</target>
	
	<target name="generate-templates" description="Generate template-based files.">
        <!-- generate static files for the site : apispark.org -->
        <delete dir="${temp}/apispark" />
        <mkdir dir="${temp}/apispark" />
		<!-- do not template sample files. -->
		<copy todir="${temp}/apispark">
            <fileset dir="../modules/org.apispark/" includes="**/*"  excludes="tutorials/files/*"/>
        </copy>
        <fmpp sourceencoding="UTF-8" outputencoding="UTF-8" sourceRoot="${temp}/apispark" outputRoot="${temp}/${apispark-org}" modes="ignore(**/.svn,**/Thumbs.db), copy(javascript/*.js, **/*.css)" quiet="reallyQuiet">
            <data expandProperties="yes">
                hierarchy:xml(hierarchy.xml)
                labels:xml(labels.xml)
                language: en
                header: ""
            </data>
            <borders><![CDATA[border('<#include "/header.ftl"/>', '<#include "/footer.ftl"/>', **/*.html*)]]></borders>
            <include name="**/*" />
            <exclude name="**/*.ftl" />
        </fmpp>
	    <copy todir="${temp}/apispark">
	        <fileset dir="../modules/org.apispark/" includes="tutorials/files/*"/>
	    </copy>
		<delete dir="${temp}/apispark" />
		<!-- generate static files for the site : restlet.org, user guide generated with pandoc -->
		<delete dir="${temp}/owr" />
		<mkdir dir="${temp}/owr" />
		<copy todir="${temp}/owr">
			<fileset dir="../modules/org.restlet/" includes="**/*" />
		</copy>
		<ant antfile="${tmpl}/config/generate-config.xml" target="generate-config" inheritAll="false">
			<property name="restlet.version" value="2.2"/>
			<property name="tmpl" value="${tmpl}"/>
			<property name="temp" value="${temp}"/>
			<property name="file.model" value="${temp}/model.properties"/>
		</ant>
		<replace dir="${temp}/owr/learn/guide/2.2" replacefilterfile="${temp}/model.properties"/>
		
		<exec executable="sh" osfamily="unix">
			<arg value="${tmpl}/md/unixtohtml.sh" />
			<arg value="${temp}/owr" />
			<arg value="${tmpl}/md/userguide.tmpl" />
		</exec>
		<fmpp sourceRoot="${temp}/owr" outputRoot="${temp}/${restlet-org}" modes="ignore(**/.svn,**/Thumbs.db)" quiet="reallyQuiet">
			<data expandProperties="yes">
				labels:xml(labels.xml)
				hierarchy:xml(hierarchy.xml)
				restletDistributions: text(data/distributions.json)
				restletVersions: text(data/versions.json)
				restletQualifiers: text(data/qualifiers.json)
				restletEditions: text(data/editions.json)
				restletContributors: slicedText(data/contributors.txt)
				language: en
				ant: antProperties()
			</data>
			<borders><![CDATA[border('<#include "/header.ftl"/>', '<#include "/footer.ftl"/>', **/*.html)]]></borders>
			<include name="**/*" />
			<exclude name="**/*.ftl" />
		</fmpp>
		<delete dir="${temp}/owr" />
        <!-- generate static files for the site : restlet.com -->
        <delete dir="${temp}/cwr" />
        <mkdir dir="${temp}/cwr" />
        <!-- no translation to French language for the moment. -->
        <copy todir="${temp}/cwr">
            <fileset dir="../modules/com.restlet/" includes="**/*" excludes="**/*.fr" />
        </copy>
        <fmpp sourceencoding="UTF-8" outputencoding="UTF-8" sourceRoot="${temp}/cwr" outputRoot="${temp}/${restlet-com}" modes="ignore(**/.svn,**/Thumbs.db), copy(javascript/*.js, **/*.css)" quiet="reallyQuiet">
            <data expandProperties="yes">
                hierarchy:xml(hierarchy.xml)
                messages:xml(messages.xml)
                labels:xml(labels.xml)
                language: en
                header: ""
            </data>
            <localData>
                layer()
                case(**/*.fr*, {language: fr})
            </localData>
            <borders><![CDATA[border('<#include "/header.ftl"/>', '<#include "/footer.ftl"/>', **/*.html*)]]></borders>
        	<include name="**/*" />
            <exclude name="**/*.ftl*" />
        </fmpp>
        <!-- no translation to French language for the moment. -->
        <move todir="${temp}/${restlet-com}">
            <fileset dir="${temp}/${restlet-com}" includes="**/*.en" />
            <filterchain>
                <replacestring from=".js.en" to=".js"/>
            </filterchain>
            <globmapper from="*.en" to="*" />
        </move>
        <delete dir="${temp}/cwr" />
	</target>

	<target name="generate-javadocs" if="do-javadoc" description="Generate the Javadocs.">
		<delete dir="${javadocs}" verbose="false" quiet="true" includeEmptyDirs="true" />

		<javadoc packagenames="com.restlet.*" sourcepath="${src}" destdir="${javadocs}" classpathref="main.path" author="true" version="true" use="true" windowtitle="Restlet Web server ${version-full}" doctitle="Restlet Web server ${version-full}" overview="${tmpl}/javadocs/overview.html" stylesheetfile="${tmpl}/javadocs/stylesheet.css" verbose="false">
			<bottom>
				<![CDATA[<i>Copyright &#169; 2005-2013 Restlet. All Rights Reserved.</i>]]>
         </bottom>
		<tag name="associates" scope="all" description="Design stereotype: " enabled="false" />
		<tag name="clientCardinality" scope="all" description="Design stereotype: " enabled="false" />
		<tag name="label" scope="all" description="Design stereotype: " enabled="false" />
		<tag name="stereotype" scope="all" description="Design stereotype: " enabled="false" />
		<tag name="supplierCardinality" scope="all" description="Design stereotype: " enabled="false" />

		<link href="http://docs.oracle.com/javase/6/docs/api/" />
		<link href="http://www.restlet.org/documentation/${testing.restlet-version-minor}/api/" />
	</javadoc>
</target>

<!-- VERIFY target -->
<target name="verify" description="Verify build." />

<!-- INTEGRATE target -->
<target name="integrate" if="do-integrate" description="Dependencies with other projects." />

<!-- STAGE target -->
<target name="stage" description="Stage the packaging step.">
	<mkdir dir="${dist}/${dist-path}/conf" />
	<mkdir dir="${dist}/${dist-path}/bin" />
	<mkdir dir="${dist}/${dist-path}/lib" />
	<mkdir dir="${dist}/${dist-path}/${restlet-com}" />
	<mkdir dir="${dist}/${dist-path}/${restlet-org}" />

	<!-- Put everything in ${classes} into the JAR file -->
	<jar jarfile="${dist}/${dist-path}/lib/com.restlet.frontend.jar" basedir="${classes}" includes="com/restlet/frontend/**" />

	<!-- Copy the Web directories -->
	<copy todir="${dist}/${dist-path}/${restlet-com}">
		<fileset dir="${temp}/${restlet-com}" />
	</copy>
	<copy todir="${dist}/${dist-path}/${restlet-org}">
		<fileset dir="${temp}/${restlet-org}" />
	</copy>
    <copy todir="${dist}/${dist-path}/${apispark-org}">
        <fileset dir="${temp}/${apispark-org}" />
    </copy>
	<!-- Copy the config file -->
	<copy todir="${dist}/${dist-path}/conf">
		<fileset dir="${conf}" excludes="**/.svn,**/Thumbs.db" />
	</copy>
	<copy todir="${dist}/${dist-path}/bin">
		<fileset dir="${bin}" excludes="**/.svn,**/Thumbs.db, conf/" />
	</copy>
	<chmod file="${dist}/${dist-path}/bin/linux/wrapper" perm="ug+x" />

	<!-- Copy the librairies file -->
	<copy todir="${dist}/${dist-path}/lib" flatten="true">
		<fileset dir="../librairies">
			<include name="**/*.jar" />
			<exclude name="*tanuki*/**" />
		</fileset>
	</copy>
	<copy todir="${dist}/${dist-path}/lib/wrapper" flatten="true">
		<fileset dir="../librairies">
			<include name="*tanuki*/*wrapper*" />
		</fileset>
	</copy>
</target>

<!-- PACKAGE target -->
<target name="package" if="do-package" description="Generate the distribution.">
	<zip destfile="${dist}/${dist-path}.zip" basedir="${dist}" includes="${dist-path}/**/*" />
</target>

<!-- allows to refresh the working copy of the web project when some updates have been made (static files, web application, etc).-->
<target name="refresh" description="Refresh the working copy of the web project." depends="init">
	<wc-update project-code="${project-code}" project-type="${project-type}" project-minor-version="${project-minor-version}" project-release-number="${project-release-number}" />
	<ant target="generate" />
	<ant target="integrate" />
	<ant target="stage" />
</target>

</project>
